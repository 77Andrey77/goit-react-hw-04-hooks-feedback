{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Section/Section.js","components/Notification/Notification.js","components/App/App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Statistic","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","prevGood","prevNeutral","prevBad","Statistics","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAqBeA,G,MAjBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAACC,GAAD,OACjB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,QCcII,EAnBG,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC5C,OACI,+BACI,qBAAIP,UAAU,OAAd,mBAA4BG,KAC5B,qBAAIH,UAAU,OAAd,sBAA+BI,KAC/B,qBAAIJ,UAAU,OAAd,kBAA2BK,KAC3B,qBAAIL,UAAU,OAAd,oBAA6BM,KAC7B,qBAAIN,UAAU,OAAd,gCAAyCO,EAAzC,WCKGC,G,MAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,0BAASV,UAAU,UAAnB,UACI,oBAAIA,UAAU,QAAd,SAAuBS,IACtBC,OCGEC,G,MAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAO,mBAAGZ,UAAU,UAAb,SAAwBY,MCGpB,SAASC,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBX,EADqB,KACfY,EADe,OAEED,mBAAS,GAFX,mBAErBV,EAFqB,KAEZY,EAFY,OAGNF,mBAAS,GAHH,mBAGrBT,EAHqB,KAGhBY,EAHgB,KA8CtBX,EAHGH,EAAOC,EAAUC,EAY1B,OACE,gCACE,cAAC,EAAD,CAASI,MAAM,wBAAf,SACE,cAAC,EAAD,CAIEd,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA5Cc,SAACE,GACrB,OAAQA,GACN,IAAK,OACHiB,GAAQ,SAACG,GAAD,OAAcA,EAAW,KACjC,MACF,IAAK,UACHF,GAAW,SAACG,GAAD,OAAiBA,EAAc,KAC1C,MACF,IAAK,MACHF,GAAO,SAACG,GAAD,OAAaA,EAAU,KAC9B,MACF,QACE,aAmCF,cAAC,EAAD,CAASX,MAAM,aAAf,SACGH,EACC,cAACe,EAAD,CACElB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAtBDe,KAAKC,MAAOpB,EAAOG,EAAS,MAAQ,IAyBrC,cAAC,EAAD,CAAcM,QAAQ,2BCnFhC,IAYeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAACtB,EAAD,MAEJuB,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.e8620148.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"../FeedbackOptions/FeedbackOptions.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return options.map((option) => (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn\"\r\n      key={option}\r\n      onClick={() => onLeaveFeedback(option)}\r\n    >\r\n      {option}\r\n    </button>\r\n  ));\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../Statistics/Statistics';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, positivePercentage }) => {\r\n    return (\r\n        <ul>\r\n            <li className=\"text\">Good: {good}</li>\r\n            <li className=\"text\">Neutral: {neutral}</li>\r\n            <li className=\"text\">Bad: {bad}</li>\r\n            <li className=\"text\">Total: {total}</li>\r\n            <li className=\"text\">Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nStatistic.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n};\r\nexport default Statistic;\r\n","import PropTypes from 'prop-types';\r\nimport '../Section/Section.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section className=\"section\">\r\n            <h2 className=\"title\">{title}</h2>\r\n            {children}\r\n        </section>\r\n    );\r\n};\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\nimport '../Notification/Notification.css';\r\n\r\nconst Notification = ({ message }) => {\r\n    return <p className=\"message\">{message}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\nexport default Notification;\r\n","import { useState } from \"react\";\n\nimport FeedbackOptions from \"../FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"../Statistics/Statistics\";\nimport Section from \"../Section/Section\";\nimport Notification from \"../Notification/Notification\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  // }\n\n  // class App extends Component {\n  //   state = {\n  //     good: 0,\n  //     neutral: 0,\n  //     bad: 0,\n  //   };\n  ///////////////////////////////////////////\n  //  leaveFeedback = (option) => {\n  //    this.setState((state) => ({\n  //      [option]: state[option] + 1,\n  //    }));\n  //  };\n\n  const leaveFeedback = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood((prevGood) => prevGood + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevNeutral) => prevNeutral + 1);\n        break;\n      case \"bad\":\n        setBad((prevBad) => prevBad + 1);\n        break;\n      default:\n        return;\n    }\n  };\n  ///////////////////////////////////////////////////////////\n  //  countTotalFeedback = () => {\n  //    return Object.values(this.state).reduce(\n  //      (acc, option) => acc + option,\n  //      0\n  //    );\n  //  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const total = countTotalFeedback();\n\n  ///////////////////////////////////////////////////////////\n  const countPositiveFeedbackPercentage = () => {\n    // const { good } = this.state;\n    return Math.round((good / total) * 100) || 0;\n  };\n  ///////////////////////////////////////////////////////////////\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          // onG={this.incrementGood}\n          // onN={this.incrementNeutral}\n          // onB={this.incrementBad}\n          options={[\"good\", \"neutral\", \"bad\"]}\n          onLeaveFeedback={leaveFeedback}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {total ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}